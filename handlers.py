import logging
from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message

from trello_api import TrelloManager
from utils import parse_message, format_card_description, validate_required_fields
from config import Config

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Trello –±—É–¥–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ñ–∞–π–ª–µ
trello_manager = None


def setup_handlers(dp, manager):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"""
    global trello_manager
    trello_manager = manager

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_fields, Command("fields"))
    dp.message.register(handle_message)

    return dp


# ... –∏–º–ø–æ—Ä—Ç—ã –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start ---------------------------------
async def cmd_start(message: Message):
    welcome_text = """üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –≤ Trello.</b>

üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:</b>

<b>–° –∫–∞–≤—ã—á–∫–∞–º–∏:</b>
"–∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
"–¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞": "10.09.2025"
"–∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫": "25.10.2025"
"–∫–ª–∏–µ–Ω—Ç": "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞"
"—Ü–≤–µ—Ç": "—Ü–≤–µ—Ç"
"—Ç–µ–ª–µ—Ñ–æ–Ω": "+7 XXX XXX XXXX"
"–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

<b>–ë–µ–∑ –∫–∞–≤—ã—á–µ–∫:</b>
–∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
–¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: 10.09.2025
–∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫: 25.10.2025
–∫–ª–∏–µ–Ω—Ç: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
—Ü–≤–µ—Ç: —Ü–≤–µ—Ç
—Ç–µ–ª–µ—Ñ–æ–Ω: +7 XXX XXX XXXX
–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

üí° <b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ:</b> –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏
üí° <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è</b> –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
üí° <b>–î–∞—Ç—ã –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å</b> –±–µ–∑ –∫–∞–≤—ã—á–µ–∫."""
    await message.answer(welcome_text, parse_mode="HTML")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã help ----------------------------------
async def cmd_help(message: Message):
    help_text = """<b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>

<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:</b>

<b>–° –∫–∞–≤—ã—á–∫–∞–º–∏:</b>
"–∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏": "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
"–¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞": "10.09.2025"
"–∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫": "25.10.2025"
"–∫–ª–∏–µ–Ω—Ç": "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞"
"—Ü–≤–µ—Ç": "—Ü–≤–µ—Ç"
"—Ç–µ–ª–µ—Ñ–æ–Ω": "+7 XXX XXX XXXX"
"–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ": "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"

<b>–ë–µ–∑ –∫–∞–≤—ã—á–µ–∫:</b>
–∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
–¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: 10.09.2025
–∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫: 25.10.2025
–∫–ª–∏–µ–Ω—Ç: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
—Ü–≤–µ—Ç: —Ü–≤–µ—Ç
—Ç–µ–ª–µ—Ñ–æ–Ω: +7 XXX XXX XXXX
–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ:</b> –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏
<b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è</b> –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
<b>–î–∞—Ç—ã –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å</b> –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.

<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ</b> /fields <b>—á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è.</b>"""
    await message.answer(help_text, parse_mode="HTML")


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã fields --------------------------------
async def cmd_fields(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è"""
    try:
        custom_fields = trello_manager.get_custom_fields(
            Config.TRELLO_BOARD_ID)

        if custom_fields:
            fields_list = "\n".join(
                [f"‚Ä¢ {field_name} ({field_info['type']})" for field_name, field_info in custom_fields.items()])
            response_text = f"<b>üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –¥–æ—Å–∫–µ:</b>\n\n{fields_list}\n\n<b>–í—Å–µ–≥–æ –ø–æ–ª–µ–π:</b> {len(custom_fields)}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ –¥–ª—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_field_lower = Config.TELEGRAM_USER_FIELD.lower()
            if telegram_field_lower in custom_fields:
                response_text += f"\n\n‚úÖ <b>–ü–æ–ª–µ –¥–ª—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω–æ:</b> '{Config.TELEGRAM_USER_FIELD}'"
            else:
                response_text += f"\n\n‚ÑπÔ∏è <b>–ü–æ–ª–µ –¥–ª—è Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:</b> '{Config.TELEGRAM_USER_FIELD}'. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ."

            await message.answer(response_text, parse_mode="HTML")
        else:
            await message.answer("‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –∏–ª–∏ –∏—Ö –Ω–µ—Ç –Ω–∞ –¥–æ—Å–∫–µ</b>", parse_mode="HTML")
    except Exception as e:
        await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π:</b> {e}", parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π -------------------------------
async def handle_message(message: Message):
    try:
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        data = parse_message(message.text)
        logger.info(f"–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (—Ç–æ–ª—å–∫–æ –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏)
        is_valid, missing_fields = validate_required_fields(
            data, Config.REQUIRED_FIELDS)

        if not is_valid:
            await message.answer(
                f"‚ùå <b>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ:</b> {', '.join(missing_fields)}\n\n"
                "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ</b> /help <b>–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞.</b>",
                parse_mode="HTML"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º ID —Å–ø–∏—Å–∫–∞ –≤ Trello
        list_id = trello_manager.get_list_id(
            Config.TRELLO_BOARD_ID, Config.TRELLO_LIST)
        if not list_id:
            await message.answer("‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ Trello. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.</b>", parse_mode="HTML")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ Telegram
        user_info = f"@{message.from_user.username}" if message.from_user.username else f"{message.from_user.first_name} {message.from_user.last_name or ''}".strip()
        data['telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'] = user_info
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram: {user_info}")

        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        card_name = data['–∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏']
        card_description = format_card_description(data)

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –¥–æ—Å–∫–∏
        custom_fields = trello_manager.get_custom_fields(
            Config.TRELLO_BOARD_ID)
        logger.info(
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è –≤ Trello: {list(custom_fields.keys())}")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π
        custom_fields_data = {}

        # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è Trello
        field_mapping = {
            "–¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞": "–¥–∞—Ç–∞ –∑–∞–∫–∞–∑–∞",
            "–∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫": "–∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫",
            "–∫–ª–∏–µ–Ω—Ç": "–∫–ª–∏–µ–Ω—Ç",
            "—Ü–≤–µ—Ç": "—Ü–≤–µ—Ç",
            "–∏–º—è": "–∏–º—è",
            "—Ç–µ–ª–µ—Ñ–æ–Ω": "—Ç–µ–ª–µ—Ñ–æ–Ω",
            "telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": Config.TELEGRAM_USER_FIELD.lower()
        }

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        for message_field, field_value in data.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ "–∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏"
            if message_field == "–∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏":
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–µ –ø–æ–ª–µ –≤ Trello (–ø—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –º–∞–ø–ø–∏–Ω–≥)
            trello_field = field_mapping.get(message_field, message_field)

            if trello_field in custom_fields:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª–µ –¥–ª—è Trello API
                custom_fields_data[trello_field] = {
                    'id': custom_fields[trello_field]['id'],
                    'type': custom_fields[trello_field]['type'],
                    'value': field_value
                }
                logger.info(
                    f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è Trello: {trello_field} = {field_value}")
            else:
                logger.info(
                    f"–ü–æ–ª–µ '{message_field}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ Trello, –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ")

        logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–æ–ª–µ–π: {custom_fields_data}")

        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ Trello —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –ø–æ–ª–µ–π
        success, result = trello_manager.create_card_with_custom_fields(
            list_id,
            card_name,
            card_description,
            custom_fields_data,
            Config.TRELLO_BOARD_ID
        )

        if success:
            card_url = result.get('shortUrl', result.get('url', ''))
            filled_fields = list(custom_fields_data.keys())

            response_text = f"‚úÖ <b>–ö–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ Trello!</b>\n\n<b>üìã –ù–∞–∑–≤–∞–Ω–∏–µ:</b> {card_name}\n<b>üîó –°—Å—ã–ª–∫–∞:</b> {card_url}"

            if filled_fields:
                response_text += f"\n<b>üìä –ó–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–∞—Å—Ç–æ–º–Ω—ã–µ –ø–æ–ª—è:</b> {', '.join(filled_fields)}"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø–∞–ª–∏ —Ç–æ–ª—å–∫–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
            description_only_fields = [field for field in data.keys()
                                       if field != "–∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏" and field not in field_mapping and field_mapping.get(field) not in custom_fields_data]
            if description_only_fields:
                response_text += f"\n<b>üìù –¢–æ–ª—å–∫–æ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏:</b> {', '.join(description_only_fields)}"

            response_text += f"\n<b>üë§ –°–æ–∑–¥–∞–ª:</b> {user_info}"

            await message.answer(response_text, parse_mode="HTML")
        else:
            await message.answer(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:</b> {result}", parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.</b> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
            "<b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ</b> /help <b>–¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞.</b>",
            parse_mode="HTML"
        )
